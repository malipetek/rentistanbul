import { error, fail } from '@sveltejs/kit';
import { BYPASS_TOKEN, DIRECTUS_URL, DIRECTUS_TOKEN } from '$env/static/private';

function isValidDate(d) {
  return d instanceof Date && !isNaN(d);
}
/** @type {import('./$types').Actions} */
export const actions = {
  default: async (event) => {
    const body = await event.request.formData();
    const bodyJSON = Object.fromEntries(body.entries());
    
    let startDate;
    let endDate;
    let errors = [];

    startDate = new Date(bodyJSON.start_date);
    if (!isValidDate(startDate)) {
      errors.push('Start date is empty or invalid');
    }
    endDate = new Date(bodyJSON.end_date);
    if (!isValidDate(endDate)) {
      errors.push('End date is empty or invalid');
    }
    
    if(bodyJSON.email === '') {
      errors.push('Email is empty');
    }

    const res = await fetch(`${DIRECTUS_URL}/items/reservations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      },
      body: JSON.stringify({
        status: 'request',
        entry_date: startDate.toISOString(),
        exit_date: endDate.toISOString(),
        customer_email: bodyJSON.email,
        rental: +bodyJSON.rental_id,
      })
    });

    if (!res.ok) {
      errors.push('Could not be saved, try again or contact us via email');
    }

    if (errors.length > 0) {
      return fail(400, { errors: errors.join(', ') });
    }
    
  }
};

/** @type {import('./$types').PageLoad} */
export async function load({ params }) {
  try {
    const url = new URL(`${DIRECTUS_URL}/items/rentals/${params.id}`);
    url.searchParams.append('fields[]', 'id,title,description,address,image,images.*,price,icon1,icon2,icon3,icon4,text1,text2,text3,text4,location,available_start,available_end');
    const res = await fetch(url, {
      method: 'get',
      headers: {
        Authorization: `Bearer ${DIRECTUS_TOKEN}`
      },
    });
    const {data} = await res.json();
        return {
          params,
          rental: {
            ...data,
            images: data.images.map(image => image.directus_files_id)
          }
        };
  } catch (err) {
    throw error(404, err.message);
  }
}

export const config = {
  isr: {
    // Random token that can be provided to bypass the cached version of the page with a __prerender_bypass=<token> cookie. Allows rendering content at request time for this route.
    bypassToken: BYPASS_TOKEN,

    // Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
    // Setting the value to `false` means it will never expire.
    expiration: 60,
  },
};